Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.
Input: arr[] = [-1, -3, -10, 0, 6]
Output: 30
class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        // code her
        int pre=1,suff=1;
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            if(pre==0){
                pre=1;
            }
            if(suff==0){
                suff=1;
            }
            pre=pre*arr[i];
            suff=suff*arr[arr.length-i-1];
            ans=Math.max(ans,Math.max(pre,suff));
        }
        return ans;
    }
}
Explanation: The subarray with maximum product is {-3, -10} with product = (-3) * (-10) = 30.
