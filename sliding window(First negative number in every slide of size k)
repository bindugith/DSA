Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

 

Example 1:

Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6
 
Example 2:
Input : 
N = 8
A[] = {12, -1, -7, 8, -15, 30, 16, 28}
K = 3
Output :
-1 -1 -7 -15 -15 0 


 class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        long arr[]=new long[N-K+1];
        int l=0;
        int i=0,j=0,count;
        while(j<A.length){
            if(j-i+1<K){
                j++;
            }else if(j-i+1==K){
                count=0;
                for(int m=i;m<=j;m++){
                    if(A[m]<0){
                        count++;
                        arr[l]=A[m];
                        l++;
                        break;
                    }
                }
                if(count==0){
                    arr[l]=0;
                    l++;
                }
                i++;
                j++;
            }
        }
        return arr;
    }
}
