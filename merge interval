Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));
        List<int[]> merge =new ArrayList<>();
        for(int[] inter:intervals){
            if(merge.isEmpty()||merge.get(merge.size()-1)[1]<inter[0]){
                merge.add(inter);
            }else{
                merge.get(merge.size()-1)[1]=Math.max(merge.get(merge.size()-1)[1],inter[1]);
            }
        }
        return merge.toArray(new int[merge.size()][]);
        
    }
}
